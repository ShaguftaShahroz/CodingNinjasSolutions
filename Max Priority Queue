/*
Implement the class for Max Priority Queue which includes following functions -
1. getSize -
Return the size of priority queue i.e. number of elements present in the priority queue.
2. isEmpty -
Check if priority queue is empty or not. Return true or false accordingly.
3. insert -
Given an element, insert that element in the priority queue at the correct position.
4. getMax -
Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
5. removeMax -
Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
*/


import java.util.*;
public class PQ {
	// Complete this class
    ArrayList<Integer> pq;
    public PQ() {
        pq = new ArrayList<>();
    }
	boolean isEmpty() {
		// Implement the isEmpty() function here
        if(getSize() == 0)
            return true;
        return false;
	}

	int getSize() {
		// Implement the getSize() function here
        return pq.size();
	}

	int getMax() {
		// Implement the getMax() function here
        return pq.get(0);
	}

	void insert(int element) {
		// Implement the insert() function here
        pq.add(element);
        int child = pq.size()-1;
        
        while(child > 0)
        {
            int parent = (child-1)/2;
            int maximum = child;
            if(child != (2*parent + 1))//if this is not left child
            {
                if(pq.get(2*parent + 1) > pq.get(maximum))
                    maximum=2*parent+1;
            }
            if(pq.get(maximum) > pq.get(parent))
            {
                int temp=pq.get(maximum);
                pq.set(maximum,pq.get(parent));
                pq.set(parent,temp);
                child = parent;
            }
            else
                break;
        }
	}

	int removeMax() {
		// Implement the removeMax() function here
        if(isEmpty())
            return Integer.MIN_VALUE;
        int ans = pq.get(0);
        pq.set(0,pq.get(pq.size()-1));
        pq.remove(pq.size()-1);
        int parent = 0;
        int left = 2*parent + 1;
        int right = 2*parent + 2;
        while(left < pq.size())
        {
            int maxIndex = parent;
            if(pq.get(left) > pq.get(maxIndex))
                maxIndex = left;
            if(right<pq.size() && (pq.get(right)>pq.get(maxIndex)))
                maxIndex = right;
            if(maxIndex == parent)
                return ans;
            int temp = pq.get(maxIndex);
            pq.set(maxIndex,pq.get(parent));
            pq.set(parent,temp);
            parent = maxIndex;
            left = 2*parent + 1;
            right = 2*parent + 1;
        }
        return ans;
	}
}
