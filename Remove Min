/*
Implement the function RemoveMin for the min priority queue class.
For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.
*/

import java.util.ArrayList;

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty() {
		return heap.size() == 0;
	}

	int size() {
		return heap.size();
	}

	int getMin() throws PriorityQueueException {
		if (isEmpty()) {
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element) {
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while (childIndex > 0) {
			if (heap.get(childIndex) < heap.get(parentIndex)) {
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			} else {
				return;
			}
		}
	}

	int removeMin() throws PriorityQueueException{
		// Complete this function
		// Throw the exception PriorityQueueException if queue is empty
        if(isEmpty())
            throw new PriorityQueueException();
        int ans = heap.get(0);
        heap.set(0,heap.get(heap.size()-1));
        heap.remove(heap.size()-1);
        int parent = 0;
        
        while(parent < heap.size())
        {
            int left = 2*parent + 1;
        	int right = 2*parent + 2;
            int minIndex = parent;
            if(left<heap.size() && heap.get(left) < heap.get(minIndex))
            {
                minIndex = left;
            }
            if(right<heap.size() && heap.get(right) < heap.get(minIndex))
            {
                minIndex = right;
            }
            if(minIndex == parent)
                return ans;
            else
            {
                int temp = heap.get(minIndex);
                heap.set(minIndex,heap.get(parent));
                heap.set(parent,temp);
                parent = minIndex;
            }
        }
        return ans;
	}
}

class PriorityQueueException extends Exception {

}
